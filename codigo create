#include <FastLED.h>
#include "colorpalettes.h"
#define NUM_LEDS 192 // numero de leds en las pantallas
#define LED_PIN 6
#define BRIGHTNESS  30
#define LED_TYPE    WS2812B
#define COLOR_ORDER RGB
CRGB leds[NUM_LEDS]; 
#define COLOR 0xffffff
//###########################################################################################################
#include <SoftwareSerial.h>
#define ARDUINO_RX 0//should connect to TX of the Serial MP3 Player module
#define ARDUINO_TX 1//connect to RX of the module
SoftwareSerial mySerial(ARDUINO_RX, ARDUINO_TX);
static int8_t Send_buf[8] = {0} ;

#define CMD_SEL_DEV 0X09
#define DEV_TF 0X02
#define CMD_PLAY_W_VOL 0X22
#define CMD_PLAY 0X0D
#define CMD_PAUSE 0X0E
#define CMD_PREVIOUS 0X02
#define CMD_NEXT 0X01
//####################################################################################################
//declaraci√≥n de variables
int d;//distorcion de matriz
int i;//distorcion de matriz
  int hora;
float tiempo = 0;
float distancia = 0;
bool boton;
int in1 = 8;  // Pin que controla el sentido de giro Motor A
int in2 = 9;  // Pin que controla el sentido de giro Motor A
int in3 = 10;// Pin que controla el sentido de giro Motor B
int in4 = 11;// Pin que controla el sentido de giro Motor B
int TRIG = 52;
int LED  = 53;
//######################################################################################################






 
void setup() {
  delay( 3000 ); // power-up safety delay
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );//configura las pantallas
  FastLED.setBrightness(  BRIGHTNESS );
  pinMode(in1, OUTPUT);    // Configura  los pines como salida
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(TRIG, OUTPUT);
   pinMode(LED_PIN, OUTPUT);
   pinMode(LED, OUTPUT);
  pinMode(A12, INPUT);  
  Serial.begin(9600); //VELOCIDAD COMUNICACION SERIAL
}


void loop(){
if(hora<=719){
  happy(0);
}
else{
  blackout1();
  happy(1);
}
pantallas1();
 }
 
//#################################################################################################################
//#################################################################################################################
 void pantallas1(){

  int a;
  int q;
  int r;
  int s;
  for (q=0;q<=11;q++)//0
  for (s=0;s<=5;s++)//3
  for (a=0;a<=9;a++){//2
      numeros(a,2);
      numeros(s,3);
      numeros(q,0);

     if (hora<=1438){
      hora++;
     }
     else {
      hora=0;
     }
     if (hora>=0 && hora<=598){
      numeros(0,1);
     }
     else if (hora>=599 && hora<=718){
      numeros(1,1);
     }
     else if (hora>=719 && hora<=1318){
      numeros(1,1);
     }
     else if (hora>=1319 && hora<=1438){
      numeros(1,1);
     }
     if(hora==479){
      boton = true;
      digitalWrite(LED, HIGH);
     }
     digitalRead(LED);
     if (LED == LOW){
      boton = false;
     }
     do{
      carrito();
      bocina();
     }while (boton);
     
   blackout();
   delay(60000);
   
    
}

}
//#################################################################################################################
//#################################################################################################################
    
  


void blackout(){
  int x;
for (x = 0; x <= 128; x++)
  {
    leds[x] = 0x000000;
  }
  FastLED.show();
  delay(500);
}

void blackout1(){
  int x;
for (x =129; x <= 192; x++)
  {
    leds[x] = 0x000000;
  }
  FastLED.show();
  delay(500);
}

 



void numeros(int num, int Matriz) { 

switch (Matriz)
{
  case 0:
  d = 0;
  i = 0;
  break;

  case 1:
   d = 0;
  i = 4;
  break;

  case 2:
   d = 64;
  i = 0;
  break;

  case 3:
   d = 64;
  i = 4;
  break;

}



 switch (num)
 
{
  
case 0:
leds[2+d+i] = COLOR;
leds[1+d+i] = COLOR;
leds[12+d-i] = COLOR;
leds[15+d-i] = COLOR;
leds[16+d+i] = COLOR;
leds[19+d+i] = COLOR;
leds[28+d-i] = COLOR;
leds[31+d-i] = COLOR;
leds[32+d+i] = COLOR;
leds[35+d+i] = COLOR;
leds[44+d-i] = COLOR;
leds[47+d-i] = COLOR;
leds[48+d+i] = COLOR;
leds[51+d+i] = COLOR;
leds[61+d-i] = COLOR;
leds[62+d-i] = COLOR;
 FastLED.show();
break;

case 1:
 leds[0+d+i] =  COLOR;
 leds[14+d-i] =  COLOR;
 leds[18+d+i] =  COLOR;
 leds[15+d-i] =  COLOR;
 leds[16+d+i] =  COLOR;
 leds[31+d-i] =  COLOR;
 leds[32+d+i] =  COLOR;
 leds[47+d-i] =  COLOR;
 leds[48+d+i] =  COLOR;
 leds[63+d-i] =  COLOR;
  FastLED.show();
 break;

 case 2:
  leds[12+d-i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[31+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[33+d+i] =  COLOR;
  leds[45+d-i] =  COLOR;
  leds[51+d+i] =  COLOR;
  leds[60+d-i] =  COLOR;
  leds[61+d-i] =  COLOR;
  leds[62+d-i] =  COLOR;
  leds[63+d-i] =  COLOR;
   FastLED.show();
 break;

 case 3:
  leds[12+d-i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[30+d-i] =  COLOR;
  leds[29+d-i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[62+d-i] =  COLOR;
  leds[61+d-i] =  COLOR;
  leds[51+d+i] =  COLOR;
  FastLED.show();
 break;

 case 4:
  leds[0+d+i] =  COLOR;
  leds[3+d+i] =  COLOR;
  leds[12+d-i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[19+d+i] =  COLOR;
  leds[28+d-i] =  COLOR;
  leds[29+d-i] =  COLOR;
  leds[30+d-i] =  COLOR;
  leds[31+d-i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[63+d-i] =  COLOR;
   FastLED.show();
break;

case 5:
  leds[3+d+i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[0+d+i] =  COLOR;
  leds[12+d-i] =  COLOR;
  leds[19+d+i] =  COLOR;
  leds[28+d-i] =  COLOR;
  leds[29+d-i] =  COLOR;
  leds[30+d-i] =  COLOR;
  leds[60+d-i] =  COLOR;
  leds[62+d-i] =  COLOR;
  leds[61+d-i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
   FastLED.show();
break;

case 6:
leds[3+d+i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[0+d+i] =  COLOR;
  leds[12+d-i] =  COLOR;
  leds[19+d+i] =  COLOR;
  leds[28+d-i] =  COLOR;
  leds[35+d+i] =  COLOR;
  leds[34+d+i] =  COLOR;
  leds[60+d-i] =  COLOR;
  leds[63+d-i] =  COLOR;
  leds[62+d-i] =  COLOR;
  leds[61+d-i] =  COLOR;
  leds[33+d+i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[44+d-i] =  COLOR;
  leds[51+d+i] =  COLOR;
   FastLED.show();
  break;
  

  case 7:
   leds[0+d+i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[63+d-i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[31+d-i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[3+d+i] =  COLOR;
  leds[18+d+i] =  COLOR;
  leds[17+d+i] =  COLOR;
   FastLED.show();
  break;

  case 8:
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[31+d-i] =  COLOR;
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[62+d-i] =  COLOR;
  leds[61+d-i] =  COLOR;
  leds[29+d-i] =  COLOR;
  leds[30+d-i] =  COLOR;
  leds[28+d-i] =  COLOR;
  leds[19+d+i] =  COLOR;
  leds[12+d-i] =  COLOR;
  leds[35+d+i] =  COLOR;
  leds[44+d-i] =  COLOR;
  leds[51+d+i] =  COLOR;
   FastLED.show();
  break;

  case 9:
   leds[3+d+i] =  COLOR;
  leds[2+d+i] =  COLOR;
  leds[1+d+i] =  COLOR;
  leds[0+d+i] =  COLOR;
  leds[15+d-i] =  COLOR;
  leds[16+d+i] =  COLOR;
  leds[32+d+i] =  COLOR;
  leds[31+d-i] =  COLOR;  
  leds[47+d-i] =  COLOR;
  leds[48+d+i] =  COLOR;
  leds[63+d-i] =  COLOR;
  leds[29+d-i] =  COLOR;
  leds[30+d-i] =  COLOR;
  leds[28+d-i] =  COLOR;
  leds[19+d+i] =  COLOR;
  leds[12+d-i] =  COLOR;
   FastLED.show();
 break;

case 10:
leds[2+d+i] = COLOR;
leds[1+d+i] = COLOR;
leds[12+d-i] = COLOR;
leds[15+d-i] = COLOR;
leds[16+d+i] = COLOR;
leds[19+d+i] = COLOR;
leds[28+d-i] = COLOR;
leds[31+d-i] = COLOR;
leds[32+d+i] = COLOR;
leds[35+d+i] = COLOR;
leds[44+d-i] = COLOR;
leds[47+d-i] = COLOR;
leds[48+d+i] = COLOR;
leds[51+d+i] = COLOR;
leds[61+d-i] = COLOR;
leds[62+d-i] = COLOR;
 FastLED.show();
break;

case 11:
 leds[0+d+i] =  COLOR;
 leds[14+d-i] =  COLOR;
 leds[18+d+i] =  COLOR;
 leds[15+d-i] =  COLOR;
 leds[16+d+i] =  COLOR;
 leds[31+d-i] =  COLOR;
 leds[32+d+i] =  COLOR;
 leds[47+d-i] =  COLOR;
 leds[48+d+i] =  COLOR;
 leds[63+d-i] =  COLOR;
  FastLED.show();
 break;
}
}

void happy(int dia){
  switch(dia)
  {
    case 0:
    leds[137] = COLOR;
    leds[138] = COLOR;
    leds[141] = COLOR;
    leds[142] = COLOR;
    leds[145] = COLOR;
    leds[146] = COLOR;
    leds[149] = COLOR;
    leds[150] = COLOR;
    leds[163] = COLOR;
    leds[164] = COLOR;
    leds[170] = COLOR;
    leds[173] = COLOR;
    leds[179] = COLOR;
    leds[180] = COLOR;
    leds[181] = COLOR;
    leds[178] = COLOR;
    FastLED.show();
    break;
    case 1:
    leds[137] = COLOR;
    leds[138] = COLOR;
    leds[141] = COLOR;
    leds[142] = COLOR;
    leds[145] = COLOR;
    leds[146] = COLOR;
    leds[149] = COLOR;
    leds[150] = COLOR;
    leds[163] = COLOR;
    leds[164] = COLOR;
    leds[170] = COLOR;
    leds[173] = COLOR;
    leds[179] = COLOR;
    leds[180] = COLOR;
    leds[162] = COLOR;
    leds[165] = COLOR;
    FastLED.show();
    break;

    
  }
}





void stop1() { //para la musica y el carro
  digitalWrite(in1, LOW);  // GIRO DERECHA
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  sendCommand( CMD_PAUSE, 0X0E);
}

void sendCommand(int8_t command, int16_t dat)
{
  delay(20);
  Send_buf[0] = 0x7e; //starting byte
  Send_buf[1] = 0xff; //version
  Send_buf[2] = 0x06; //the number of bytes of the command w0ithout starting byte and ending byte
  Send_buf[3] = command; //
  Send_buf[4] = 0x00;//0x00 = no feedback, 0x01 = feedback
  Send_buf[5] = (int8_t)(dat >> 8);//datah
  Send_buf[6] = (int8_t)(dat); //datal
  Send_buf[7] = 0xef; //ending byte
  for (uint8_t i = 0; i < 8; i++) //
  {
    mySerial.write(Send_buf[i]) ;
  }
}

void carrito(){
   digitalWrite(52,LOW);
   delayMicroseconds(20);
   digitalWrite(52,HIGH);
  delayMicroseconds(20);
    digitalWrite(52,LOW);
  
 tiempo = pulseIn(A12,HIGH);
  
   distancia = 0.01716 * tiempo;
  

  
  if(distancia <=10)
  {
    digitalWrite(in1,LOW);
    digitalWrite(in2,HIGH);
    digitalWrite(in3,HIGH);
    digitalWrite(in4,LOW);
    delay(1500);
        digitalWrite(in1,LOW);
    digitalWrite(in2,LOW);
    digitalWrite(in3,HIGH);
    digitalWrite(in4,LOW);
    delay(1500);
  }
  else{
    digitalWrite(in1,HIGH);
    digitalWrite(in2,LOW);
    digitalWrite(in3,LOW);
    digitalWrite(in4,HIGH);
}
}
void bocina(){
   delay(500);//Wait chip initialization is complete
  sendCommand(CMD_SEL_DEV, DEV_TF);//select the TF card
  delay(200);//wait for 200ms
  sendCommand(CMD_PLAY_W_VOL, 0X1E01);
}
